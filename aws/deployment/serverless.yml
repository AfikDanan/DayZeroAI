# Serverless Framework configuration for AWS deployment
service: preboarding-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'prod'}
  
  # IAM Role Permissions
  iam:
    role:
      statements:
        # S3 Permissions
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::preboarding-videos"
            - "arn:aws:s3:::preboarding-videos/*"
        
        # ElastiCache Redis Permissions
        - Effect: Allow
          Action:
            - elasticache:DescribeCacheClusters
            - elasticache:DescribeReplicationGroups
          Resource: "*"
        
        # SES Permissions (if using SES instead of SendGrid)
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        
        # CloudWatch Logs
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        
        # SQS Permissions (for job queue)
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource: 
            - "arn:aws:sqs:${self:provider.region}:*:preboarding-jobs"

  # Environment Variables
  environment:
    ENVIRONMENT: ${self:provider.stage}
    AWS_REGION: ${self:provider.region}
    S3_BUCKET_NAME: preboarding-videos-${self:provider.stage}
    REDIS_CLUSTER_ENDPOINT: ${env:REDIS_CLUSTER_ENDPOINT}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}
    FROM_EMAIL: ${env:FROM_EMAIL}
    BASE_URL: https://${self:custom.apiGatewayDomain}

# Custom variables
custom:
  apiGatewayDomain: 
    prod: api.preboarding.company.com
    dev: api-dev.preboarding.company.com
  
  # Python requirements plugin
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false
    
  # S3 bucket for videos
  s3BucketName: preboarding-videos-${self:provider.stage}

# Lambda Functions
functions:
  # API Gateway handler
  api:
    handler: aws.lambda_handler.api_handler
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: /
          method: get
          cors: true
      - http:
          path: /health
          method: get
          cors: true
      - http:
          path: /webhooks/user-onboarding
          method: post
          cors: true
    environment:
      LAMBDA_FUNCTION_TYPE: api

  # Background video generation worker
  videoWorker:
    handler: aws.lambda_handler.worker_handler
    timeout: 900  # 15 minutes
    memorySize: 3008  # Maximum memory for video processing
    events:
      - sqs:
          arn: 
            Fn::GetAtt: [VideoJobsQueue, Arn]
          batchSize: 1  # Process one video at a time
    environment:
      LAMBDA_FUNCTION_TYPE: worker

# AWS Resources
resources:
  Resources:
    # S3 Bucket for video storage
    VideoStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

    # S3 Bucket Policy for public read access to videos
    VideoStorageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref VideoStorageBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource: !Sub "${VideoStorageBucket}/videos/*"

    # SQS Queue for video generation jobs
    VideoJobsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: preboarding-jobs-${self:provider.stage}
        VisibilityTimeoutSeconds: 960  # Slightly longer than Lambda timeout
        MessageRetentionPeriod: 1209600  # 14 days
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt VideoJobsDeadLetterQueue.Arn
          maxReceiveCount: 3

    # Dead Letter Queue for failed jobs
    VideoJobsDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: preboarding-jobs-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600  # 14 days

    # ElastiCache Redis Cluster (optional - can use external Redis)
    RedisCluster:
      Type: AWS::ElastiCache::ReplicationGroup
      Properties:
        ReplicationGroupId: preboarding-redis-${self:provider.stage}
        Description: Redis cluster for preboarding service
        NodeType: cache.t3.micro
        Engine: redis
        NumCacheClusters: 1
        Port: 6379
        SecurityGroupIds:
          - !Ref RedisSecurityGroup

    # Security Group for Redis
    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Redis cluster
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: !Ref LambdaSecurityGroup

    # Security Group for Lambda functions
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda functions

  # Outputs
  Outputs:
    ApiGatewayUrl:
      Description: API Gateway URL
      Value: !Sub "https://${RestApiApigEvent}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    
    S3BucketName:
      Description: S3 bucket for video storage
      Value: !Ref VideoStorageBucket
    
    SQSQueueUrl:
      Description: SQS queue URL for video jobs
      Value: !Ref VideoJobsQueue

# Plugins
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

# Package configuration
package:
  patterns:
    - '!node_modules/**'
    - '!.git/**'
    - '!.pytest_cache/**'
    - '!tests/**'
    - '!dev_output/**'
    - '!videos/**'
    - '!venv/**'
    - '!__pycache__/**'
    - '!*.pyc'